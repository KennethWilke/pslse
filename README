+---------------------------------------+
| Power Service Layer Simulation Engine |
+---------------------------------------+

This repository contains code for simulation and testing of a customer designed Accelerated Functional Unit (AFU) and it's accompanying application by
simulating the connection to the Power Service Layer (PSL) as part of IBM's
CAPI interconnect on Power8 systems.  The "libcxl" directory contains a
simulation only version of the libcxl library functions for hardware provided
at https://github.com/ibm-capi/libcxl.  That code is an abstraction layer that
interfaces with kernel level "cxl" code for communicating with an AFU in real
hardware.  The libcxl code server two purposes.  First, it provides a simple
programming interface for accessing AFU devices.  Second, if code is written
using this abstraction layer then the same code can be compiled with the
alternate version of libcxl.c and libcxl.h found on this repository for
co-simulation of the AFU on most industry standard Verilog simulators.

It should be noted that only a handful of functions are currently supported in
both environments.  This list should grow but in programming of applications
should focus only on using the currently supported functions.

Functions currenty supported in both "libcxl" and "pslse":
- struct cxl_afu_h * cxl_afu_open_dev (char *path);
- int cxl_afu_attach (struct cxl_afu_h *afu, __u64 wed);
- void cxl_afu_free (struct cxl_afu_h *afu);
- bool cxl_pending_event (struct cxl_afu *afu);
- int cxl_read_event (struct cxl_afu_h *afu, struct cxl_event *event);
- int cxl_mmio_map (struct cxl_afu_h *afu, __u32 flags);
- int cxl_mmio_unmap (struct cxl_afu_h *afu);
- void cxl_mmio_write64 (struct cxl_afu_h *afu, uint64_t offset, uint64_t data);
- uint64_t cxl_mmio_read64 (struct cxl_afu_h *afu, uint64_t offset);
- void cxl_mmio_write32 (struct cxl_afu_h *afu, uint64_t offset, uint632t data);
- uint32_t cxl_mmio_read32 (struct cxl_afu_h *afu, uint64_t offset);

The directories contain the following:

afu_driver/src:		Contains the code that will be needed by the Verilog
			simulator.

afu_driver/verilog:	Contains the file top.v which is a top level wrapper
			that will instantiate your AFU Verilog code.

common:			Contains code used in multiple places.

debug:			Contains code for parsing debug.log created by pslse.

libcxl:			Contains the replacement libcxl.c file in addition to a
			pslse_server.dat file.

pslse:			Contains the code for the PSLSE server.

sample_app:		Contains shell code a sample application.
